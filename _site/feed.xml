<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 07 Aug 2015 21:41:03 +0800</pubDate>
    <lastBuildDate>Fri, 07 Aug 2015 21:41:03 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>libsvm使用总结</title>
        <description>&lt;p&gt;##&lt;/p&gt;

</description>
        <pubDate>Thu, 06 Aug 2015 00:00:00 +0800</pubDate>
        <link>/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/2015/08/06/Libsvm.html</link>
        <guid isPermaLink="true">/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/2015/08/06/Libsvm.html</guid>
        
        
        <category>机器学习</category>
        
      </item>
    
      <item>
        <title>编译原理（一）</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;词法分析&lt;/h2&gt;

&lt;p&gt;编译器的目的是根据源码生成可以执行的文件，想一步到位完全不靠谱，可以先进行分词处理，那么这就是词法分析要完成的工作了！&lt;/p&gt;

&lt;p&gt;用正则表达是来描述词法规则是比较简单的，而用状态机进行匹配则是比较迅速的，那么比较重要的就是在他们之间的互相转换：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里有：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;概念&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;NFA&lt;/td&gt;
      &lt;td&gt;不确定自动机，从当前状态根据字符转移的时候，下一个状态是不确定的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DFA&lt;/td&gt;
      &lt;td&gt;确定自动机，状态转移时下一个状态时确定的&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;来看一个NFA的例子，对于&lt;strong&gt;(a|b)*abb&lt;/strong&gt;这样的词，对应的NFA为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在遍历的过程中顺便更新状态就可以了，用代码来描述一下：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
S = &amp;epsilon;-closure(s0); // 注意：这里的S是个集合
c = nextChar();
while(c != eof){
    S = &amp;epsilon;-closure(move(S,c));// 状态转移+空转移
    c = nextChar();
}
if(S &amp;cap; F != &amp;empty;) return &quot;yes&quot;;
eles return &quot;no&quot;;
&lt;/pre&gt;

&lt;p&gt;看起来NFA的模拟方式效率并不高，而且代码写起来也有点小复杂，而DFA则完全不一样：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
s = s0;
c = nextChar();
while(c != eof){
    s = move(s, c);
    c = nextChar();
}
if(s在F中) return &quot;yes&quot;;
else return &quot;false&quot;;
&lt;/pre&gt;

&lt;p&gt;是不是简单了很多？但是也更显然，NFA与正则之间的关系更加直观，那么先来看从正则到NFA的转换：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用这种方式从&lt;strong&gt;(a|b)*a&lt;/strong&gt;得到的NFA为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;既然DFA相对于NFA来说是有优势的，那么如果有一个方法能将NFA转换为DFA，那么可以一劳永逸。这里&lt;strong&gt;子集构造法&lt;/strong&gt;还是相当的直观的的：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
一开始，&amp;epsilon;-closure(s0)是Dstates中唯一状态，且它未加标记;
while(在Dstates中一个未加标记状态T){
    给T加上标记;
    for(每个输入符号a){
        U = &amp;epsilon;-closure(move(T,a));
        if(U不在Dstates中)
            将U加入到Dstates中，且不加标记;
        Dtran[T,a] = U;
    }
}
&lt;/pre&gt;

&lt;p&gt;其中的：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;操作&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ε-closure(s)&lt;/td&gt;
      &lt;td&gt;能够从NFA的状态s开始只通过ε转换到达的NFA状态集合&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ε-closure(T)&lt;/td&gt;
      &lt;td&gt;能够从T中某个NFA状态s开始只通过ε转换到达的NFA状态集合&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;move(T,a)&lt;/td&gt;
      &lt;td&gt;能够从T中某个状态s出发通过标号a的转换到达的NFA状态的集合&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;那么现在就有一条路径了：&lt;strong&gt;正则-&amp;gt;NFA-&amp;gt;DFA&lt;/strong&gt;也太累了，有没有&lt;strong&gt;正则-&amp;gt;DFA&lt;/strong&gt;这样一条通路？答案是肯定的，首先根据正则构造出抽象语法树：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
初始化Dstates,使之只包含未标记的状态firstpos(n0),其中n0是r(#)的抽象语法树的根节点;
while(Dstates中存在未标记的状态S){
    标记S;
    for(每个输入符号a){
        令U为S中和a对应的所有位置p的followpos(p)的并集;
        for(U不在Dstates中)
            将U作为未标记的状态加入到Dstates中;
        Dtran[S,a] = U;
    }
&lt;/pre&gt;

&lt;p&gt;其中：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;定义&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;nullable(n)&lt;/td&gt;
      &lt;td&gt;节点n的子表达式的语言中包含ε&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;firstpos(n)&lt;/td&gt;
      &lt;td&gt;以节点n为根的子表达式中第一个符号的位置的集合&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lastpos(n)&lt;/td&gt;
      &lt;td&gt;以节点n为根的子表达式中最后一个符号的位置的集合&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;followpos(p)&lt;/td&gt;
      &lt;td&gt;可能出现在位置p后面的位置的集合&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其实背后的底层原理与从NFA到DFA还是比较相似的，只不过是用不同的构造方式来做。DFA确实要比NFA好处理一些，但并不是说生成DFA之后就没事了，其中的状态数可以压缩：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;根据接收、非接收状态分为两组；&lt;/li&gt;
  &lt;li&gt;遍历分组、字符，如果同一组内的状态根据该字符到达了不同的组，那么将继续将当前的分组进行分割；&lt;/li&gt;
  &lt;li&gt;重复执行步骤2直到没有变化；&lt;/li&gt;
  &lt;li&gt;每个分组中选择一个代表状态，重新构造DFA，最小化完成；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以证明&lt;strong&gt;最小化状态&lt;/strong&gt;数的DFA唯一性，然而最小化的过程更加容易让我们去理解状态机的本质。来个最小化状态数的例子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;语法分析&lt;/h2&gt;

&lt;p&gt;语法分析器从词法分析器得到TOKEN流，&lt;strong&gt;生成语法分析树&lt;/strong&gt;或者&lt;strong&gt;抽象语法树&lt;/strong&gt;，方便进一步地处理。预发处理的规则通常是用&lt;strong&gt;上下文无关文法&lt;/strong&gt;来描述：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;E → E+T|T // 从E+T可以推导出E，也可以从T推导出E
T → T*F|F
F → (E)|id&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于一个TOKEN流，语法分析器的目的是就是把这些规则“套”上去，从而知道输入的内容是什么样的结构，而输出可能是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;左边是分析语法树，右边是抽象语法树，比较而言抽象语法树更简单一些，而且便利起来更加容易。如果通过一个语法在推导某个式子的时候可以得到两个不同的语法树，那么说明这种语法是有二义性的，比如&lt;strong&gt;if E1 then if E2 then S1 else S2&lt;/strong&gt;中的else就不知道应该对应哪个if，那么进行修改：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;消除二义性好像没有什么万能的方法，但是消除左递归却是有的：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
按照某个顺序将非终结符号排序为A1、A2....
for(从1到n的每个i){
    for(从1到i-1的每个j){
        将每个形如Ai&amp;rarr;Aj&amp;upsih;的产生式替换为产生式组Ai&amp;rarr;&amp;delta;1&amp;upsih;|&amp;delta;2&amp;upsih;|...
        其中Aj&amp;rarr;&amp;delta;1|&amp;delta;2|....是所有Aj的产生式
    }
    消除Aj产生式之间的立即左递归
}
&lt;/pre&gt;

&lt;p&gt;是不是有点像拓扑排序？有了这些规则那么就需要写程序来按照其描述的逻辑进行处理，说白了就是用程序的结构去模拟预发的结构：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
void A(){
    选择A的一个产生式，A&amp;rarr;X1X2X3...
    for(i = 1 to k){
        if(Xi是一个非终结符号)
            调用过程Xi();
        else if(Xi等于当前输入符号a)
            读入下一个输入符号
        else
            /* 发现错误，需要回溯 */
    }
}
&lt;/pre&gt;

&lt;p&gt;典型的&lt;strong&gt;自顶向下&lt;/strong&gt;分析的方法，用递归来实现很容易与语法规则对应起来，但是在出现错误的时候就退回重试显示效率低下的处理方式。在知道下一个TOKEN是什么的情况下就知道用那个产生式，那么就不需要那么多无谓的尝试了，这就是&lt;strong&gt;LL(1)&lt;/strong&gt;的想法，需要两个集合：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;集合&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FIREST(α)&lt;/td&gt;
      &lt;td&gt;可以由α推导得到的串的终结符的集合&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FOLLOW(A)&lt;/td&gt;
      &lt;td&gt;在某些句型中紧跟在A右边的终结符号的集合&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;那么之后在终结符号A处使用FOLLOW(A)中的产生式来进行处理即可，这时候非递归的写法也是非常简单的。其实构造FIRST和FOLLOW的过程还是挺简单的，不再赘述。&lt;/p&gt;

&lt;p&gt;下面接着来看&lt;strong&gt;自底向上&lt;/strong&gt;的分析过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这种方式中我们并不是从“根”出发的，而是在看到能处理的部分就把它处理掉，可以用栈来实现：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;比较麻烦的是，我们不知道当前有哪些是可以处理的，按道理来说每次在需要的时候去遍历产生式并递归来做也是可以搞定的，但是不免会有很多的遍历是重复劳动，那么就需要预处理了。对于表达式&lt;strong&gt;A→XYZ&lt;/strong&gt;，如果考虑位置的话有四种情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A→.XYZ&lt;/li&gt;
  &lt;li&gt;A→X.YZ&lt;/li&gt;
  &lt;li&gt;A→XY.Z&lt;/li&gt;
  &lt;li&gt;A→XYZ.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们将这些称为项，由一个语法的产生式对应的过个产生式中有一些是等价的，将他们放在同一个集合（项集）中，比如对于语法 ：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;E’→E&lt;/li&gt;
  &lt;li&gt;E→E+T|T&lt;/li&gt;
  &lt;li&gt;T→T*F|F&lt;/li&gt;
  &lt;li&gt;F→(E)|id&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;生成项集之后，在遇到一个TOKEN的情况下就知道下个项集是什么了，这样我们根据上面的语法就得到了一个状态图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;项集闭包的构造方法比较简单：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
SetOfItems CLOSURE(I){
    J = I;
    repeat:
        for(J中的每个项A→α.Bβ)
            for(G的每个产生式B→γ)
                if(项B→.γ不在J中)
                    将B→.γ加入J中;
    until 在某一轮中没有新项被加入到J中;
    return J;
}
&lt;/pre&gt;

&lt;p&gt;有了状态的定义，那么接下来需要定义状态之间的转换：&lt;strong&gt;GOTO(I,X)&lt;/strong&gt;表示了形如A→α.Xβ所在的项集到A→αX.β的转换，构造方法如下：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
void items(G'){
    C = {CLOSURE([S'→.S])};
    repeat
        for(C中的每个项集I)
            for(每个文法符号X)
                if(GOTO(I,X)非空且不在C中)
                    将GOTO(I,X)加入C中;
    until 在某一轮中没有新的项集被加入到C中;
}
&lt;/pre&gt;

&lt;p&gt;有了上面这些，我们可以开始构造一个&lt;strong&gt;SLR(1)&lt;/strong&gt;语法分析表了：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果[A→α.aβ]在Ii中并且GOTO(Ii,a)=Ij，那么将ACTION[i,a]设置为“&lt;strong&gt;移入j&lt;/strong&gt;”;&lt;/li&gt;
  &lt;li&gt;如果[A→α.]在Ii中，那么对于FOLLOW(A)中所有的a，将ACTION[i,a]设置为规约“&lt;strong&gt;规约A→α&lt;/strong&gt;”;&lt;/li&gt;
  &lt;li&gt;如果[S’→S.]在Ii中，那么将ACTION[i,$]设置为“&lt;strong&gt;接受&lt;/strong&gt;”;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在分析程序中用一个栈来记录当前看到的状态，然后根据ACTION来进行操作即可。&lt;/p&gt;

&lt;p&gt;在LR(0)中能规约的时候就规约，这样做很不科学，但是在有冲突的时候好像没有别的方法，只能“向前看”。&lt;strong&gt;规范LR&lt;/strong&gt;充分地利用了向前看符号，利用一个很大的项集来工作，每个项的格式如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;形式为[A→α.Bβ,a]，前半部分不变，后半部分为向前看符号&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;构造方法如下：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
SetOfItems CLOSURE(I){
    repeat
        for(I中的每个项[A→α.Bβ,a])
            for(FIRST(βa)中的每个终结符号b)
                将[B→.γ,b]加入到集合I中
    until 不能向I中加入更多的项
    return I;
}
SetOfItems GOTO(I,X){
    将J初始化为空集;
    for(I中的每个项[A→α.Bβ,a])
        将项[A→αB.β,a]加入到集合J中
    return CLOSURE(J);
}
void items(G'){
    将C初始化为{CLOSURE}({[S'→.S,$]});
    repeat
        for(C中的每个项集I)
            for(每个文法符号X)
                if(GOTO(I,X)非空且不在C中)
                    将GOTO(I,X)加入到C中;
    until 不再有新的项集加入到C中;
}
&lt;/pre&gt;

&lt;p&gt;对于文法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;S’→S&lt;/li&gt;
  &lt;li&gt;S→C C&lt;/li&gt;
  &lt;li&gt;C→c C | d&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;得到的规范LR项集的状态图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Compiler-11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时构造分析表的方法如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果[A→α.aβ，b]在Ii中且GOTO(Ii,a)=Ij，那么将ACTION[i,a]设置为“移入j”;&lt;/li&gt;
  &lt;li&gt;如果[A→α.,a]在Ii中且A≠S’，那么将ACTION[i,a]设置为“规约A→α.”;&lt;/li&gt;
  &lt;li&gt;如果[S’→S,$]在Ii中，那么将ACTION[i,$]设置为“接受”;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这种方式和SLR的运行方式类似，不再赘述！&lt;/p&gt;

&lt;p&gt;向前看LR(&lt;strong&gt;LALR&lt;/strong&gt;)基于LR(0)项集族，和基于LR(1)项的典型语法分析器相比，状态要少很多，通过想LR(0)项中小心地引入向前看符号，我们使用LALR方法处理的文法比使用SLR处理的文法更多，同时构造得到的语法分析表并不比SLR语法分析表大，通常情况下LALR方法是最合适的选择。&lt;/p&gt;

&lt;p&gt;可以将LALR看做是将LR(1)中有相同核心项的项集合并，那么按照这种思路就可以从LR(1)构造得到LALR的分析表和GOTO，但是耗费空间巨大，&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
for(K中的每个项A→α.β){
    J:=CLOSURE({[A→α.β,#]});
    if([B→ϒ.Xδ,a]在J中，并且a不等于#)
        断定GOTO(I,X)中的项B→ϒ.Xδ的向前看符号a是自发生的
    if([B→ϒ.Xδ,#]在J中)
        断定向前看符号从I中的项A→α.β传播到了GOTO(I,X)中的项B→ϒX.δ上
}
&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;语法制导翻译&lt;/h2&gt;
</description>
        <pubDate>Sat, 01 Aug 2015 00:00:00 +0800</pubDate>
        <link>/dsl/2015/08/01/Compiler-Theory.html</link>
        <guid isPermaLink="true">/dsl/2015/08/01/Compiler-Theory.html</guid>
        
        
        <category>dsl</category>
        
      </item>
    
      <item>
        <title>Jstorm</title>
        <description>&lt;p&gt;实际上做过的大部分的系统很难算是分布式系统，处理的流程一般是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将请求随机交给一台机器；&lt;/li&gt;
  &lt;li&gt;在这台机器上面进行处理，如果处理量比较大就开多线程；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在一台机器上面去开多线程处理感觉又回到了古老的单机作战的时代，扩展和性能都是有上限的，那么能不能将一个任务交给不同的机器来协同完成？&lt;/p&gt;

&lt;p&gt;数据处理方面根据不同的场景大致可以分为下面两种场景：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;离线分析&lt;/strong&gt;：特点是查询单一、数据加工过程也单一，用Hadoop来解决；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;在线分析&lt;/strong&gt;：特点是查询随机，玩的就是索引，那么QPS必然不会很高，而且需要的都是好机器，可以用阿里云的ADS来解决；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;看是天下太平，但真正用的时候还是会有问题：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;像ADS这样的产品，可以在一份静态的数据上面方便地进行各种查询，但是新增、更新操作特别频繁的情况下，索引的重构可能会存在瓶颈。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实时性也是数据处理的一个目标，记得之前在压测的时候在Solr实时更新索引上死得很惨，所以需要考虑更加有效、低成本地解决方式。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;基本概念&lt;/h2&gt;

&lt;p&gt;集群架构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Jstorm-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以及：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Jstorm-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;nimbus&lt;/strong&gt;：分发任务、任务、监控集群运行状态；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;supervisor&lt;/strong&gt;：监听nimbus的指令，接受分发代码、任务并执行；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;worker&lt;/strong&gt;：真正执行的进程；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;task&lt;/strong&gt;：任务；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;executor&lt;/strong&gt;：一个线程，用来轮询task中的接口；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在jstorm中运行的程序就是一个&lt;strong&gt;topology&lt;/strong&gt;，说白了就是一个jar包，可以在nimbus节点使用命名把jar包提交给集群，那么这个jar包中的程序的结构如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Jstorm-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;spout&lt;/strong&gt;：源头；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;bolt&lt;/strong&gt;：处理器；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tuple&lt;/strong&gt;：数据；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注：任务分发、启动的流程可以看&lt;a href=&quot;http://xumingming.sinaapp.com/647/twitter-storm-code-analysis-topology-execution/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在分布式系统中数据都准确性是最难的，通常在检查消息消费失败的时候重试。而在Jstorm里面中就更为复杂，一个消息从spout发给bolt，而一个bolt可能发给多个bolt，这样就构成了一棵树形结构，在jstorm中用&lt;strong&gt;acker&lt;/strong&gt;机制来检测消息是否失败：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Jstorm-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;显然这是一个随机算法，但是发生错误的概率非常小！但是，如果真的出错那就蛋疼了，做个开关或者接口让程序开发者来自己实现acker不好么？&lt;/p&gt;

&lt;p&gt;在并发编程中经常要碰到去处理资源竞争，处理的方式基本上两种：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;锁&lt;/li&gt;
  &lt;li&gt;根据所需要的资源进行分组&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;用第2种方式，将不同的任务分发给不同的节点来处理，这样就可以减少很多的竞争、简化处理的代码、容易提高性能，在jstorm提供了丰富&lt;strong&gt;grouping&lt;/strong&gt;方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;随机分组&lt;/li&gt;
  &lt;li&gt;根据某个字段分组&lt;/li&gt;
  &lt;li&gt;广播&lt;/li&gt;
  &lt;li&gt;直接分组&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;说到消息分组，可能看起来是在&lt;strong&gt;emit&lt;/strong&gt;的时候就直接发出去了，但事实上并不是这样：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建tuple；&lt;/li&gt;
  &lt;li&gt;worker将目标taskId+tuple放到待发送队列；&lt;/li&gt;
  &lt;li&gt;由一个单独的线程来负责将消息发送给对应的任务处理；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外在jstorm中提供了一些更高级的抽象：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CoordinatedBolt&lt;/li&gt;
  &lt;li&gt;Transactional Topology&lt;/li&gt;
  &lt;li&gt;DRPC&lt;/li&gt;
  &lt;li&gt;Trident&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了做到&lt;strong&gt;处理且仅处理一次&lt;/strong&gt;的目的，并且不能牺牲掉并发性，那么Transactional Topology的做法是将一个batch的计算分为两个阶段来完成：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;processing&lt;/strong&gt;：多个batch并行处理；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;commit&lt;/strong&gt;：一个一个地提交，batch之间保持强有序；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而Trident则是一个更方便、可靠的接口~&lt;/p&gt;

&lt;p&gt;附jstorm中常用参数设置：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;参数&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;topology.message.timeout.secs&lt;/td&gt;
      &lt;td&gt;超时时间，如果超时则认为失败&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;topology.max.task.parallelism&lt;/td&gt;
      &lt;td&gt;最大并行度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;topology.state.synchronization.timeout.secs&lt;/td&gt;
      &lt;td&gt;组件同步状态源的最大超时时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;topology.max.spout.pending&lt;/td&gt;
      &lt;td&gt;缓存spout发送的tuple数，超出会阻塞&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;topology.executor.receive.buffer.size&lt;/td&gt;
      &lt;td&gt;executor线程的接收队列大小&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;topology.executor.send.buffer.size&lt;/td&gt;
      &lt;td&gt;executor线程的发送队列大小&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;topology.receiver.buffer.size&lt;/td&gt;
      &lt;td&gt;worker接收线程缓存消息的大小&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;topology.transfer.buffer.size&lt;/td&gt;
      &lt;td&gt;worker进程中向外发送消息的缓存大小&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;storm.messaging.netty.max_wait_ms&lt;/td&gt;
      &lt;td&gt;最大等待时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;storm.messaging.netty.min_wait_ms&lt;/td&gt;
      &lt;td&gt;最小等待时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;topology.ackers&lt;/td&gt;
      &lt;td&gt;ackaer任务数&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;drpc&quot;&gt;DRPC&lt;/h2&gt;

&lt;p&gt;互联网中用户的操作通常是轻量级的，插一下数据库、更新一下缓存就搞定了，但是对于仓库管理这种系统很多操作比较重，有些任务可能需要遍历数据库中的表才能完成，而Distributed RPC可能是提高性能、降低风险的一个途径。&lt;/p&gt;

&lt;p&gt;用Jstorm来搞DRPC的过程如下：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
DRPCClient client = new DRPCClient(&quot;drpc-host&quot;, 3772);
String result = client.execute(&quot;reach&quot;, &quot;http://twitter.com&quot;);
&lt;/pre&gt;

&lt;p&gt;客户端给DRPC服务器发送要执行的方法名称以及参数，实现了这个函数的topology使用DRPCSpout从DRPC服务器接收函数调用流。每个函数调用被DRPC服务器标记了一个唯一的id。这个topology然后计算结果，在topology的最后一个叫做ReturnResults的bolt会将调用的结果发送给DRPC服务器。&lt;/p&gt;

&lt;p&gt;之前想过可能用一些更简单的方法来试下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在spout的节点提供一个rpc服务；&lt;/li&gt;
  &lt;li&gt;在调用这个服务的时候发送消息给bolt，然后在bolt中完成任务的分发及处理；&lt;/li&gt;
  &lt;li&gt;在spout中统计是否所有的消息都成功消费；&lt;/li&gt;
  &lt;li&gt;返回数据；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样弄会有一些问题，但是感觉没有强依赖于jstorm，而仅仅是用它的消息分发机制就可以了。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;数据流式处理&lt;/h2&gt;

&lt;p&gt;在流式处理的过程中，每次面对的都是单个的记录，而事实上统计都是有状态的，那么：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;可以把状态保存在本地；&lt;/li&gt;
  &lt;li&gt;可以把状态保存在hbase、ldb等外部的存储；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;保存在本地的内存中速度会很快，也没有序列化等开销，而且通常流处理中时效性要求是比价强的，过去很久的数据基本上就不会再次处理。所以：流玩的好不好，就看本地缓存用的好不好了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;很多语言从一开始就在考虑如何简单地去实现并发编程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;erlang&lt;/li&gt;
  &lt;li&gt;golang&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而我们这些作为老Java程序猿只能是自己去东拼西凑地搞出一个来简化分布式系统中的开发成本。现在考虑下来jstorm应该是个不错的选择：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;运行一个固定结构的topology；&lt;/li&gt;
  &lt;li&gt;在topology上面可以动态地加载、编译我们要执行的脚本；&lt;/li&gt;
  &lt;li&gt;在spout、bolt中调用脚本中的方法；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样也许我们可以更低的成本来享受分布式带来的好处~~&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2015 00:00:00 +0800</pubDate>
        <link>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/31/Jstorm.html</link>
        <guid isPermaLink="true">/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/31/Jstorm.html</guid>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>组件化</title>
        <description>&lt;p&gt;做后端开发已经很清楚地知道如何抽象、解耦，现在RESTful风格的再次流行也让整个后端开发看起来尽善尽美，而前段也很牛逼，有了bootstrap之后，不懂css也能很快上手搞出一个页面，况且还有&lt;a href=&quot;http://www.ibootstrap.cn/&quot;&gt;ibootstrap&lt;/a&gt;这种工具逆天般的存在。&lt;/p&gt;

&lt;p&gt;但是，让一个人做出来一个完整的功能就傻逼了，而有组件化之后就不同了。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;目标&lt;/h2&gt;

&lt;p&gt;页面都是用一堆的HTML拼出来的，可以进行划分为一些小块：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;输入框&lt;/li&gt;
  &lt;li&gt;下拉列表&lt;/li&gt;
  &lt;li&gt;按钮&lt;/li&gt;
  &lt;li&gt;列表&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在同一个应用中，这些组件都长得差不多，那么在一个VM上开发了一个按钮之后，通常的做法是在另外一个VM上把代码粘贴上去并简单修改一些参数。在用webx的时候我们会做一堆的controller，但是这个还远远不够。&lt;/p&gt;

&lt;p&gt;组件化的目标就是：&lt;strong&gt;让你ctrl-c、ctrl-v个痛快&lt;/strong&gt;，&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;第一种方案&lt;/h2&gt;

&lt;p&gt;同事正在做的方式，通过一个后台的页面来维护一个树状结构：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;页面
    &lt;ul&gt;
      &lt;li&gt;容器&lt;/li&gt;
      &lt;li&gt;组件A&lt;/li&gt;
      &lt;li&gt;组件B&lt;/li&gt;
      &lt;li&gt;容器&lt;/li&gt;
      &lt;li&gt;组件C&lt;/li&gt;
      &lt;li&gt;组件D&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用一个巨复杂的页面来一个一个构建。这种方案的缺点是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在数据库中用各种表来保存组件数据；&lt;/li&gt;
  &lt;li&gt;在第一次使用中完全不知道怎么使用，除非你知道这套系统的执行逻辑；&lt;/li&gt;
  &lt;li&gt;偶尔会出现配置出错的情况，这台方案回滚起来只能靠人脑了；&lt;/li&gt;
  &lt;li&gt;功能越强大，用起来越复杂；&lt;/li&gt;
  &lt;li&gt;在需要增加新功能的时候必然要去修改配置的页面；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-2&quot;&gt;第二种方案&lt;/h2&gt;

&lt;p&gt;为了改善易用性，另外一种就是用高大上的前端来搞定配置的过程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在配置页面的过程中，可以在组件上绑定属性和事件，这种方式的问题在于：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;底层结构复杂；&lt;/li&gt;
  &lt;li&gt;配置页面的交互开发量太大；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3&quot;&gt;第三种方案&lt;/h2&gt;

&lt;p&gt;通常来说DSL基本上是每个专业领域提升效率的终极武器，在配置一个页面的时候可以这样：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@layout
    @input(name = &quot;warehouse_id&quot;, label = &quot;仓库&quot;)
    @inputWithTime(name = &quot;xxx&quot;, label = &quot;xxx&quot;)
    @button(label = &quot;查询&quot;)
    @button(label = &quot;导出&quot;)
@layout
	@table // 列表的展示
    @page  // 分页组件的展示
&lt;/pre&gt;

&lt;p&gt;页面之间最麻烦的是数据交互和联动，比如在查询的时候需要知道查询条件分别是什么，有两种解决办法，第一种是为button绑定事件，在点击的时候获取其他组件的数据：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@button
	@onclick
    	var warehouse_id = getByName(&quot;warehouse_id&quot;);
        var response = query(&quot;/path&quot;, warehouse_id);
        // 更新table的展示
&lt;/pre&gt;

&lt;p&gt;看起来是搞定了，而且可以吧获取参数等操作进行封装，使得配置起来更加简单，不过他们之间的耦合有点紧，现在的想法是可以用订阅者模式来松一松：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@channel(name = &quot;queryParam&quot;)
// ..
@input(name = &quot;warehouse_id&quot;, outChannel = &quot;queryParam&quot;)
// ..
@button(label = &quot;查询&quot;, inChannel = &quot;queryParam&quot;)
&lt;/pre&gt;

&lt;p&gt;在组件中定义了输出数据的接口以及接收数据的接口，在input发生变化的时候将数据发送给channel，在channel中有数据的时候将结果推送给订阅过它的组件。&lt;/p&gt;

&lt;p&gt;那么问题来了：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;往channel中放的数据是什么格式的？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;貌似&lt;strong&gt;key-value&lt;/strong&gt;的形式可以搞定很多的需求，而在各个组件的作用域也有一个map来保存数据，仅仅是用channel来互相之间同步数据。当然并不是传输数据的时候都去覆盖掉老的数据，可能会有一些个性化的操作：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@button(label = &quot;查询&quot;, inChannel = &quot;queryParam&quot;)
	@onclick
        data = query(&quot;/&quot;, warehouse_id);
        putChannel(&quot;tableData&quot;, data);
&lt;/pre&gt;

&lt;p&gt;在拿到这个模板之后，我们可以这么干：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;解析模板文件；&lt;/li&gt;
  &lt;li&gt;生成AST，然后翻译生成JS文件；&lt;/li&gt;
  &lt;li&gt;前端页面加载JS文件之后，根据其中的数据生成页面展示；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样搞起来感觉难度挺大，但是好处多多！&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;组件化很多人在做，做的时间也比较久，但是好像没有做得比较好用的。那么，为什么不尝试一些新的方法和技术。&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2015 00:00:00 +0800</pubDate>
        <link>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/31/Componentization.html</link>
        <guid isPermaLink="true">/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/31/Componentization.html</guid>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>WEB开发笔记</title>
        <description>&lt;h2 id=&quot;springbeanfilter&quot;&gt;用SpringBean来配置Filter&lt;/h2&gt;

&lt;p&gt;在web开发中通常会遇到多个环境的问题，比如开发和线上，那他们使用的配置信息也是不同的，Spring给出的解决这个问题的方法是变量替换：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
&amp;lt;bean class=&quot;my.class.path&quot;&amp;gt;
    &amp;lt;property name=&quot;env&quot; value=&quot;${ENV}&quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/pre&gt;

&lt;p&gt;但是对于web.xml中的属性这样搞就行不通了，那简单的解决办法就是绕路了：用Spring中配置的Bean来作为Filter行不行？答案是肯定的：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
&amp;lt;filter&amp;gt;
    &amp;lt;filter-name&amp;gt;ssoFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;filter-class&amp;gt;org.springframework.web.filter.DelegatingFilterProxy&amp;lt;/filter-class&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;targetBeanName&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;myFilterBean&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;init-param&amp;gt;
        &amp;lt;param-name&amp;gt;targetFilterLifecycle&amp;lt;/param-name&amp;gt;
        &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
&amp;lt;/filter&amp;gt;
&lt;/pre&gt;

&lt;p&gt;容器初始化的顺序为Listener-&amp;gt;Filter-&amp;gt;Servlet，这样上面这种玩法跑通就没有问题了~&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;

</description>
        <pubDate>Tue, 21 Jul 2015 00:00:00 +0800</pubDate>
        <link>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/21/Web-Dev.html</link>
        <guid isPermaLink="true">/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/21/Web-Dev.html</guid>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>如何动态地执行代码</title>
        <description>&lt;p&gt;假如你在用Java的碰到这些问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;灵活地配置规则&lt;/li&gt;
  &lt;li&gt;部署代码无需重启即时生效&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;而恰恰你是个“low逼”或者“懒货”不想（更多的是不行）去定义自己的脚本、规则引擎，那么下面这些可能是个不错的选择。&lt;/p&gt;

&lt;h2 id=&quot;groovy&quot;&gt;Groovy的使用&lt;/h2&gt;

&lt;p&gt;Groovy是一种基于JVM的敏捷开发语言，可以无缝与Java整合：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
Binding binding = new Binding();
binding.setProperty(&quot;foo&quot;, new Integer(2));
GroovyShell shell = new GroovyShell(binding);
shell.evaluate(&quot;println foo&quot;);
&lt;/pre&gt;

&lt;p&gt;用&lt;strong&gt;GroovyShell&lt;/strong&gt;看起来是非常简单的，但问题是每次在evaluate的时候都需要去解析、编译，速度肯定是上不去的，另外也会频繁地产生很多的Class，增加了内存回收的负担（甚至OOM），但是也看具体使用场景~~&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
String[] roots = new String[] { &quot;your groovy script path&quot; };
GroovyScriptEngine gse = new GroovyScriptEngine(roots);
Binding binding = new Binding();
binding.setProperty(&quot;foo&quot;, new Integer(2));
gse.run(&quot;GroovyShellHellow.groovy&quot;, binding);
&lt;/pre&gt;

&lt;p&gt;用&lt;strong&gt;GroovyScriptEngine&lt;/strong&gt;的时候有了缓存，而且用起来也更加简单，用起来也很简单了，但是很多人开始诟病Groovy脚本的性能，确实是比较低，再来看一种处理方式：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
new GroovyClassLoader().parseClass(&quot;print 123&quot;);// 得到Class
&lt;/pre&gt;

&lt;p&gt;在用&lt;strong&gt;GroovyClassLoader&lt;/strong&gt;生成好Class之后通过反射调用对应的方法。有人可能觉得这种方法弱爆了，又难用又效率低，但是如果将生成的Class缓存起来呢？等等，应该怎么生成Class？&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
CompilerConfiguration configuration = new CompilerConfiguration();
configuration.setOutput(new PrintWriter(new FileWriter(&quot;D:\\a&quot;)));
configuration.setTargetDirectory(&quot;D:\\&quot;);
new GroovyClassLoader(
    Thread.currentThread().getContextClassLoader(),
        configuration)
        .parseClass(&quot;print 123&quot;);
&lt;/pre&gt;

&lt;p&gt;好了，讲差不多了，我们来重点看下GroovyClassLoader吧。可能在你看完GroovyScriptEngine之后会说：GroovyScriptEngine已经将GroovyClassLoader封装的挺不错的来，但是会有一个问题：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;其中用的是同一个ClassLoader，在脚本发生变化的时候就生成新的Class，时间久了Perm就满了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在可以对GroovyClassLoader根据业务具体的需求进行封装即可，在上面的代码中可以在指定的文件夹中就可以生成好Class。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;既然GroovyClassLoader直接可以解析脚本，为什么还需要生成Class。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果做的平台用的人非常多，成千上万个脚本都是有可能的（虽然现在一个都没有），那么在系统启动的时候是不是要把所有的脚本拿下来编译一遍？这个可能会比较影响启动的速度，所以可以在保存Script的时候再保存一个Class文件，在系统启动的时候直接去Load即可。&lt;/p&gt;

&lt;p&gt;再来看Groovy的好处：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@TypeChecked
int func(){
    def a = 123;
    a = a + &quot;&quot;;
    return a;// 这里会报错
}
&lt;/pre&gt;

&lt;p&gt;在Groovy的2.0版本以后加入了静态类型检查器，可以在编写代码的时候看到类型错误。动态语言太灵活了，这样可以减少很多开发的成本，因为不用等到运行的时候才发现错误。&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@CompileStatic
int func(){
    123 + 123 + 123;
}
&lt;/pre&gt;

&lt;p&gt;使用&lt;strong&gt;@CompileStatic&lt;/strong&gt;注释将会静态地编译代码，产生的字节码和Java运行得一样快，这样看来性能也将不再是问题。&lt;/p&gt;

&lt;p&gt;最后，现在很多规则的配置都用Groovy来解决，因为处理Map、新建类等非常方便，如果用原生的Java写的话，配置的时候不会真方便，当然，编译Java代码的方式也是要研究一下的。&lt;/p&gt;

&lt;h2 id=&quot;java&quot;&gt;动态编译Java源码&lt;/h2&gt;

&lt;p&gt;除了用Groovy这种脚本的方式，还可以用Java代码来搞：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);
JavaFileObject fileObject = new SimpleJavaFileObject(
    URI.create(&quot;string:///CalculatorTest&quot; + JavaFileObject.Kind.SOURCE.extension),
    JavaFileObject.Kind.SOURCE) {
    @Override
    public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
        return &quot;class CalculatorTest {}&quot;;
    }
};
JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager, null, null, null, Arrays.asList(fileObject));
task.call();// 编译
&lt;/pre&gt;

&lt;p&gt;在编译好Class文件之后，使用的时候加载进来，然后通过反射进行调用。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;在选择编程语言来实现某个功能时，会考虑：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;学习成本&lt;/li&gt;
  &lt;li&gt;开发速度&lt;/li&gt;
  &lt;li&gt;性能&lt;/li&gt;
  &lt;li&gt;用的人多不多&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;之前可能开口闭口都是性能，但是，感觉现在的开发语言越来越注重的是开发的速度以及语言本身是否简洁，简洁的语言更不容易写出BUG，另外如果让一个用惯了有GC的语言，再去尝试写C这种古老的语言肯定是一百个不习惯。&lt;/p&gt;

&lt;p&gt;最后为什么要考虑用的人多不多呢？因为在用的人多的情况下，大家会开发出各种各样优秀的工具，那么在实现某个功能的时候不用自己写代码了，直接“拿来主义”。&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jul 2015 00:00:00 +0800</pubDate>
        <link>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/21/Dynamic-Compilation.html</link>
        <guid isPermaLink="true">/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/21/Dynamic-Compilation.html</guid>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>SpringMVC</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;概念&lt;/h2&gt;

&lt;p&gt;在MVC中最基本的概念就是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model&lt;/li&gt;
  &lt;li&gt;View&lt;/li&gt;
  &lt;li&gt;Controller&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在SpringMVC中对这些结构进行了封装：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;名称&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ModelAndView&lt;/td&gt;
      &lt;td&gt;在同一个地方可以同时操作Model和View&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ModelMap&lt;/td&gt;
      &lt;td&gt;数据承载对象，用于到后面渲染View，在RequestMapping的时候很有用&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;当然对处理流程也进行了封装：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;名称&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;DispatcherServlet&lt;/td&gt;
      &lt;td&gt;前置分发控制器，请求统一交给它处理&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;VelocityViewResolver&lt;/td&gt;
      &lt;td&gt;通过name查找View&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HandlerInterceptor&lt;/td&gt;
      &lt;td&gt;拦截器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DefaultAnnotationHandlerMapping&lt;/td&gt;
      &lt;td&gt;类级别的@RequestMapping&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AnnotationMethodHandlerAdapter&lt;/td&gt;
      &lt;td&gt;方法级别的@RequestMapping&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HandlerMethodArgumentResolver&lt;/td&gt;
      &lt;td&gt;参数解析器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestMapping&lt;/td&gt;
      &lt;td&gt;映射规则&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@Controller&lt;/td&gt;
      &lt;td&gt;注入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@ModelAttribute&lt;/td&gt;
      &lt;td&gt;被注释的方法在Controller中处理请求的方法之前执行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@PathVariable&lt;/td&gt;
      &lt;td&gt;获取路径上的变量&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-1&quot;&gt;处理请求&lt;/h2&gt;

&lt;p&gt;用的最多的情况就是用户输入URL你给他返回一个&lt;strong&gt;页面&lt;/strong&gt;：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@RequestMapping(value = &quot;/abc&quot;)
public ModelAndView handle() throws Exception {
    ModelAndView mv = new ModelAndView(&quot;abc&quot;);
    mv.addObject(&quot;key&quot;, &quot;abc&quot;);
    return mv;
}
&lt;/pre&gt;

&lt;p&gt;在很多请求的时候需要返回&lt;strong&gt;JSON&lt;/strong&gt;数据，只需要将字符串写出即可：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@RequestMapping(value = &quot;/abc&quot;)
public void handle(HttpServletResponse response) throws Exception {
    Map map = Maps.newHashMap();
    map.put(&quot;123&quot;, 123);
    response.getOutputStream().write(JSON.toJSONString(map).getBytes());
    response.getOutputStream().flush();
}
&lt;/pre&gt;

&lt;p&gt;对于&lt;strong&gt;文件&lt;/strong&gt;下载的场景也是类似的，不同之处是要指定文件名等：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@RequestMapping(value = &quot;/abc&quot;)
public void handle(HttpServletResponse response) throws Exception {
    OutputStream os = response.getOutputStream();
    response.reset();
    response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=file.txt&quot;);
    response.setContentType(&quot;application/octet-stream; charset=utf-8&quot;);
    os.write(&quot;hello&quot;.getBytes());
    os.flush();
    os.close();
}
&lt;/pre&gt;

&lt;p&gt;从上面可以看到拿到&lt;strong&gt;HttpServletResponse&lt;/strong&gt;之后就可以完全控制住返回值了，在SpringMVC中最简单、直接的获取方式是入参，&lt;strong&gt;HandlerMethodArgumentResolver&lt;/strong&gt;会在解析参数的时候进行处理。在网上有看到用&lt;strong&gt;ModelAttribute&lt;/strong&gt;的方式，这样貌似不是线程安全的吧~&lt;/p&gt;

&lt;p&gt;对于&lt;strong&gt;HttpServletRequest&lt;/strong&gt;更简单一些，可以使用RequestContextListener或者RequestContextFilter来做，另外更简单的可以直接注入：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
@Resource
HttpServletRequest  request;
&lt;/pre&gt;

&lt;p&gt;看起来很诡异，这个是如何注入的？其实这里的request只是一个代理，真正的处理过程可以看：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ObjectFactoryDelegatingInvocationHandler&lt;/li&gt;
  &lt;li&gt;RequestObjectFactory&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是找了一圈没找到Response有类似的方法，所以，这种方式对Response可能行不通。其实我们自己也可以实现类似的功能，比如用&lt;strong&gt;HandlerInterceptor&lt;/strong&gt;来搞：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
public interface HandlerInterceptor {
    // 在方法之前执行
    boolean preHandle(HttpServletRequest request,
        HttpServletResponse response,
        Object handler) throws Exception;
    // 在方法之后执行
    void postHandle(HttpServletRequest request,
        HttpServletResponse response,
        Object handler,
        ModelAndView modelAndView) throws Exception;
    // 在请求处理完成的时候执行
    void afterCompletion(HttpServletRequest request,
        HttpServletResponse response,
        Object handler,
        Exception ex) throws Exception;
&lt;/pre&gt;

&lt;p&gt;我们在preHandle的时候将Request、Response写入ThreadLocal，用FactoryBean来在注入的时候生成代理对象，在调用代理对象的时候先从ThreadLocal中获取对象，再反射调用对象的方法。&lt;/p&gt;

&lt;p&gt;从URL到Controller中的方法的映射也是一个需要注意的地方：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;设置&lt;/th&gt;
      &lt;th&gt;匹配&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestMapping(value = “/abc”)&lt;/td&gt;
      &lt;td&gt;/abc、/abc.*、/abc/&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestParam(“id”)&lt;/td&gt;
      &lt;td&gt;限制参数中必须有id，并将其放到入参中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestMapping(value = “/abc/{id}”)&lt;/td&gt;
      &lt;td&gt;REST风格，用@PathVariable(“id”)放到入参&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestMapping(value = “/{path:[0-9a-z-]+}”)&lt;/td&gt;
      &lt;td&gt;支持正则表达式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestMapping(method = RequestMethod.GET)&lt;/td&gt;
      &lt;td&gt;方法过滤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestMapping(params = “123”)&lt;/td&gt;
      &lt;td&gt;参数过滤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestMapping(headers = “abc”)&lt;/td&gt;
      &lt;td&gt;头信息过滤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestMapping(consumes = “application/json”)&lt;/td&gt;
      &lt;td&gt;处理请求的提交内容类型过滤&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@RequestMapping(produces = “application/json”)&lt;/td&gt;
      &lt;td&gt;返回的内容类型过滤&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在SpringMVC中整体的处理逻辑都在&lt;strong&gt;DispatcherServlet&lt;/strong&gt;中完成，处理逻辑如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;处理multipart类型的请求&lt;/li&gt;
  &lt;li&gt;获取处理链HandlerExecutionChain，其中封装了拦截器和处理器&lt;/li&gt;
  &lt;li&gt;执行拦截器的preHandle方法&lt;/li&gt;
  &lt;li&gt;执行处理器&lt;/li&gt;
  &lt;li&gt;设置View&lt;/li&gt;
  &lt;li&gt;执行拦截器的postHandle方法&lt;/li&gt;
  &lt;li&gt;渲染&lt;/li&gt;
  &lt;li&gt;执行拦截器的afterCompletion方法&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-2&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;总体看下来比webx简单、好用一些。&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jul 2015 00:00:00 +0800</pubDate>
        <link>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/11/SpringMVC.html</link>
        <guid isPermaLink="true">/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/11/SpringMVC.html</guid>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>Redis设计与实现</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://img4.douban.com/mpic/s27297117.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;这本书主要是讲Redis底层的实现，总体上分为四部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;数据结构与对象&lt;/li&gt;
  &lt;li&gt;单机数据库的实现&lt;/li&gt;
  &lt;li&gt;多机数据库的实现&lt;/li&gt;
  &lt;li&gt;独立功能的实现&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个顺序和作者自己学习的顺序应该是一致的，但是感觉有一点不合理：在刚开始看的时候一直比较着急，因为是在对Redis整体上没有概念的情况下看细节。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;学习笔记&lt;/h2&gt;

&lt;p&gt;在Redis中键为字符串、值为对象，底层处理用到的数据结构有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;动态字符串：使用预分配和惰性释放来减少内存操作次数&lt;/li&gt;
  &lt;li&gt;链表&lt;/li&gt;
  &lt;li&gt;字典：渐进式rehash防止卡住&lt;/li&gt;
  &lt;li&gt;跳跃表&lt;/li&gt;
  &lt;li&gt;整数集合：有序、不重复的整数集合，在必要的时候升级来节约内存&lt;/li&gt;
  &lt;li&gt;压缩列表：连续内存保存整数或字节的列表，通过压缩来节省内存&lt;/li&gt;
  &lt;li&gt;对象：在Redis中都是对象，实现基于上面的数据结构&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于Redis是用C编写的，没有垃圾回收机制，因此在对象系统中构建了一个&lt;strong&gt;引用计数&lt;/strong&gt;实现内存回收器，通过该机制，程序可以通过跟踪对象的引用计数信息，在适当的时候自动释放对象并进行内存回收。&lt;/p&gt;

&lt;p&gt;有了这些基础就可以开始看Redis作为一个服务器是如何工作的：&lt;/p&gt;

&lt;pre&gt;
                  +-------------+                   
                  | redisServer |                   
                  +------+------+                   
                         |                          
+-----------+     +------+------+      +-----------+
|redisClient+-----+   redisDb   +--+---+    dict   |
+-----------+     +-------------+  |   +-----------+
                  |   redisDb   |  |                
                  +-------------+  |   +-----------+
                  |   redisDb   |  +---+  expires  |
                  +-------------+      +-----------+

&lt;/pre&gt;

&lt;p&gt;其中：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;dict&lt;/strong&gt;：键空间&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;expires&lt;/strong&gt;：键的过期时间&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;还有另外一种做过期时间的方法是：对dict上的键做扩展，增加过期时间字段。和Redis的做法相比可能有几个缺点：浪费空间、遍历时浪费时间、结构不清晰。过期键的删除有三种策略：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;定时删除&lt;/strong&gt;：在设置键的过期时间时创建Timer，当Timer运行时执行删除操作&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;惰性删除&lt;/strong&gt;：在取值时判断是否过期，如果过期则删除&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;定期删除&lt;/strong&gt;：每隔一段时间对数据库进行检查扫描，删除里面过期的键&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;定时删除显然不靠谱，在Redis中同时使用了&lt;strong&gt;定期删除&lt;/strong&gt;和&lt;strong&gt;惰性删除&lt;/strong&gt;，当然在持久化程序中也需要考虑过期时间。&lt;/p&gt;

</description>
        <pubDate>Wed, 08 Jul 2015 00:00:00 +0800</pubDate>
        <link>/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2015/07/08/Redis.html</link>
        <guid isPermaLink="true">/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/2015/07/08/Redis.html</guid>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>Cookie</title>
        <description>&lt;h2 id=&quot;cookie&quot;&gt;COOKIE是什么&lt;/h2&gt;

&lt;p&gt;一切的罪魁祸首都是由于HTTP协议是无状态的，也就是说没有上下文的！那么对于网站来说，它只能输出网页了，至于用户啥的就搞不定了。显然不可接受，于是有了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;COOKIE&lt;/li&gt;
  &lt;li&gt;SESSION&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;COOKIE在浏览器保存信息，SESSION在服务器保存信息，我们可以在Chrome里面F12可以看到COOKIE的内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/Cookie-F12.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;各列的含义如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;属性&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Name&lt;/td&gt;
      &lt;td&gt;键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Value&lt;/td&gt;
      &lt;td&gt;值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Domain&lt;/td&gt;
      &lt;td&gt;域名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Path&lt;/td&gt;
      &lt;td&gt;路径&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Expires/Max-age&lt;/td&gt;
      &lt;td&gt;过期时间，超过过期时间会被删除&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Size&lt;/td&gt;
      &lt;td&gt;大小&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Http&lt;/td&gt;
      &lt;td&gt;限制脚本访问和修改，可以在一定程度提升安全性&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Secure&lt;/td&gt;
      &lt;td&gt;只在HTTPS的链接中才能正常使用，否则就当它不存在吧&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;以后再发送请求的时候就会带上COOKIE，服务器上拿到之后就可以判断是哪个用户发过来的请求了！既然请求都会带COOKIE，那么如果保存了很多数据的话也会给网络传输增加负担，所以使用需谨慎！其实浏览器对大小也有限制，而基本上做的都是规范的下限：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;总共至少可存300个&lt;/li&gt;
  &lt;li&gt;每个域名至少可存20个&lt;/li&gt;
  &lt;li&gt;每个COOKIE至少可以存4KB&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;要是别人向我的网站写入COOKIE然后再操作怎么办？不知道别人有没有过类似的担心，因为有域名的限制，所以总体来说COOKIE还是挺好用的！&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;登录&lt;/h2&gt;

&lt;p&gt;在COOKIE中存放三个东西：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户名：明文保存&lt;/li&gt;
  &lt;li&gt;登录序列：只有在密码修改的时候时候才更新，否则每次都一样&lt;/li&gt;
  &lt;li&gt;随机数：在同一个会话中用一个，再次登录之后重新生成&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样可以保证每个用户只能登录一次，而且可以通过判断&lt;strong&gt;随机数&lt;/strong&gt;是否发生变化来做盗用检测，这时候可以通过重新登录并生成&lt;strong&gt;登录序列&lt;/strong&gt;来使盗用者的COOKIE失效。&lt;/p&gt;

&lt;p&gt;当然登录还有很多有趣的细节，可以看&lt;a href=&quot;http://coolshell.cn/articles/5353.html&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;安全&lt;/h2&gt;

&lt;p&gt;在cookie中保存很多关键性的数据，不过不安全还是挺蛋疼的，我们来看看这套机制的设计者是如何考虑安全问题的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;不能跨域访问&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要是我能随便增加、删除别人的网站上面的cookie，那就没法玩了~ 由于在JS中也可以操作cookie，那么对于有输入的应用（比如博客）就危险了，用户输入一段JS同样也可以进行操作了：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;设置HttpOnly属性之后不能通过脚本访问&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有了上面两个限制，那么剩下的事情就是防止别人模拟发送请求就可以了，比如通过随机数的方式。&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jul 2015 00:00:00 +0800</pubDate>
        <link>/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/04/Cookie.html</link>
        <guid isPermaLink="true">/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2015/07/04/Cookie.html</guid>
        
        
        <category>编程技术</category>
        
      </item>
    
      <item>
        <title>VIM</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://7xiz10.com1.z0.glb.clouddn.com/VIM-LOGO.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很早之前就知道VIM很厉害，不过作为一个Java攻城狮，用起来实在是不方便，完全没有Eclipse或者IDEA写代码顺畅，比如代码提示等（怀疑自己配置有问题-.-!）。最近对golang非常感兴趣，然而默认的IDE实在是太丑了，所以决心把VIM捡起来。&lt;/p&gt;

&lt;p&gt;周围用Emacs的同事越来越多，但是简单用了几次，总觉得不怎么顺手，也就不了了之。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;插件管理器&lt;/h2&gt;

&lt;p&gt;相比现代编辑器，VIM缺乏默认的插件管理功能，之前在配置时不停地从网上收集插件，然后粘贴到对应的目录下。这个过程相当地考验耐心，以及人品。&lt;/p&gt;

&lt;p&gt;最近无意间发现了一个插件管理工具：&lt;strong&gt;vundle&lt;/strong&gt;。玩了一下感觉还不错，首先从github上下载:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后修改&lt;strong&gt;vimrc&lt;/strong&gt;文件：&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
set nocompatible &quot;关闭兼容模式
filetype off &quot;
set rtp+=~/.vim/bundle/Vundle.vim &quot; 写自己安装的目录
call vundle#begin() &quot;

Bundle 'gmarik/Vundle.vim' &quot; 插件列表
&quot; ... 插件列表

call vundle#end() &quot;
filetype plugin indent on
&lt;/pre&gt;

&lt;p&gt;如果是&lt;strong&gt;vim-scripts&lt;/strong&gt;下面的插件直接写名字就好了，否则为&lt;strong&gt;用户名/插件&lt;/strong&gt;的格式，使用时用到的几个命令如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;:BundleList&lt;/td&gt;
      &lt;td&gt;列举出列表中(.vimrc中)配置的所有插件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:BundleInstall&lt;/td&gt;
      &lt;td&gt;安装列表中全部插件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:BundleInstall!&lt;/td&gt;
      &lt;td&gt;更新列表中全部插件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:BundleSearch foo&lt;/td&gt;
      &lt;td&gt;查找foo插件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:BundleSearch! foo&lt;/td&gt;
      &lt;td&gt;刷新foo插件缓存&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:BundleClean&lt;/td&gt;
      &lt;td&gt;清除列表中没有的插件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;:BundleClean!&lt;/td&gt;
      &lt;td&gt;清除列表中没有的插件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-1&quot;&gt;写代码之前&lt;/h2&gt;
</description>
        <pubDate>Wed, 10 Jun 2015 00:00:00 +0800</pubDate>
        <link>/%E5%B7%A5%E5%85%B7/2015/06/10/VIM.html</link>
        <guid isPermaLink="true">/%E5%B7%A5%E5%85%B7/2015/06/10/VIM.html</guid>
        
        
        <category>工具</category>
        
      </item>
    
  </channel>
</rss>
